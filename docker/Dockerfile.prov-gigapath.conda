# =============================================================
# Configuration
# =============================================================

ARG UBUNTU_VERSION=22.04
ARG CUDA_MAJOR_VERSION=12.1.0
ARG CUDNN_MAJOR_VERSION=8
ARG PYTHON_VERSION=3.9.15
ARG BUILD_JOBS=16

# =============================================================
# Create docker
# =============================================================

FROM nvidia/cuda:${CUDA_MAJOR_VERSION}-cudnn${CUDNN_MAJOR_VERSION}-runtime-ubuntu${UBUNTU_VERSION} AS base

# propagate build args
ARG CUDA_MAJOR_VERSION
ARG PYTHON_VERSION
ARG BUILD_JOBS

# configure environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND noninteractive

# configure timezone
ENV TZ=Europe/Amsterdam
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# install libs
RUN apt-get update --fix-missing && \
    apt-get install -y --no-install-recommends \
        git \
        vim \
        screen \
        curl \
        wget \
        xz-utils \
        build-essential \
        libgomp1 \
        libjpeg-turbo8 \
        libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev \
        libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev gcovr libffi-dev uuid-dev \
        libgtk2.0-dev libgsf-1-dev libtiff5-dev libopenslide-dev \
        libgl1-mesa-glx libgirepository1.0-dev libexif-dev librsvg2-dev fftw3-dev orc-0.4-dev

# install specific pixman version
RUN cd /tmp && \
    wget https://www.cairographics.org/releases/pixman-0.40.0.tar.gz && \
    tar -xf pixman-0.40.0.tar.gz && \
    cd pixman-0.40.0 && \
    ./configure && \
    make && \
    make install && \
    export LD_PRELOAD=/usr/local/lib/libpixman-1.so.0.40.0 && \
    cd /tmp && \
    rm -r pixman-0.40.0 && \
    rm pixman-0.40.0.tar.gz

# install python with up-to-date pip
RUN cd /tmp && \
    wget "https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz" && \
    tar xfv Python*.xz && \
    cd Python-3*/ && \
    ./configure --enable-shared LDFLAGS="-fprofile-arcs" && \
    make -j${BUILD_JOBS} install && \
    cd ~ && \
    rm -rf /tmp/Python-3* && \
    ldconfig

RUN python3 -m pip install --upgrade pip pip-tools wheel setuptools && \
    printf '#!/bin/bash\necho "Please use pip3 instead of pip to install packages for python3"' > /usr/local/bin/pip && \
    chmod +x /usr/local/bin/pip && \
    rm -rf ~/.cache/pip

# install ASAP
RUN apt-get update && \
    apt-get -y install curl git && \
    curl --remote-name --location "https://github.com/computationalpathologygroup/ASAP/releases/download/ASAP-2.1-(Nightly)/ASAP-2.1-Ubuntu2204.deb" && \
    dpkg --install ASAP-2.1-Ubuntu2204.deb || true && \
    apt-get -f install --fix-missing --fix-broken --assume-yes && \
    ldconfig -v && \
    apt-get clean && \
    echo "/opt/ASAP/bin" > /usr/local/lib/python3.9/site-packages/asap.pth && \
    rm ASAP-2.1-Ubuntu2204.deb

# Ensures that Python output to stdout/stderr is not buffered: prevents missing information when terminating
ENV PYTHONUNBUFFERED 1

RUN groupadd -r user && useradd -m --no-log-init -r -g user user

# install miniconda
RUN mkdir -p /root/miniconda3
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /root/miniconda3/miniconda.sh
RUN bash /root/miniconda3/miniconda.sh -b -u -p /root/miniconda3
RUN rm -rf /root/miniconda3/miniconda.sh
ENV PATH="/root/miniconda3/bin:$PATH"

WORKDIR /home/user/

# clone prov-gigapath repo
RUN git clone https://github.com/prov-gigapath/prov-gigapath

# configure conda environment
COPY environment.yaml /tmp/.
RUN conda env create -f /tmp/environment.yaml

# add ASAP to conda env python path
RUN echo "/opt/ASAP/bin" > /root/miniconda3/envs/gigapath/lib/python3.9/site-packages/asap.pth

# install specific opencv-python version
# RUN /root/miniconda3/envs/gigapath/bin/python3.9 -m pip install opencv-python==4.4.0.46

WORKDIR /home/user/

# activate conda environment
RUN echo "source /root/miniconda3/etc/profile.d/conda.sh && conda activate gigapath" >> ~/.bashrc

# add gigapath folder to conda env python path
ENV PYTHONPATH="/home/user/prov-gigapath:$PYTHONPATH"

USER user