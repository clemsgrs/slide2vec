csv: # path to csv containing slide paths

output_dir: "output" # output directory
resume: false # resume from a previous run

visualize: false # visualize slide tiling

tiling:
  spacing: 0.5 # spacing at which to tile the slide, in microns per pixel
  tile_size: 256 # size of the tiles to extract, in pixels
  backend: "asap" # backend to use for slide reading
  tissue_pixel_value: 1 # value of tissue pixel in pre-computed segmentation masks
  downsample: 64 # find the closest downsample in the slide for tissue segmentation
  seg_params:
    sthresh: 8 # segmentation threshold (positive integer, using a higher threshold leads to less foreground and more background detection) (not used when use_otsu=True)
    mthresh: 7 # median filter size (positive, odd integer)
    close: 4 # additional morphological closing to apply following initial thresholding (positive integer)
    use_otsu: false # use otsu's method instead of simple binary thresholding
  params:
    overlap: 0.0 # percentage of overlap between two consecutive tiles (float between 0 and 1)
    drop_holes: false # whether or not to drop tiles whose center pixel falls withing an identified holes
    tissue_thresh: 0.01 # threshold used to filter out tiles that have less tissue than this value (percentage)
    use_padding: true # whether to pad the border of the slide
    ref_tile_size: 16 # reference tile size at spacing tiling.spacing
    a_t: 4 # area filter threshold for tissue (positive integer, the minimum size of detected foreground contours to consider, relative to the reference tile size ref_tile_size, e.g. a value 10 means only detected foreground contours of size greater than 10 [ref_tile_size, ref_tile_size] tiles at spacing tiling.spacing will be kept)
    a_h: 2 # area filter threshold for holes (positive integer, the minimum size of detected holes/cavities in foreground contours to avoid, once again relative to the reference tile size ref_tile_size)
    max_n_holes: 8 # maximum of holes to consider per detected foreground contours (positive integer, higher values lead to more accurate patching but increase computational cost ; keeps the biggest holes)

model:
  level: "tile" # level at which to extract the features
  name: "" # model name
  batch_size: 128
  tile_size: ${tiling.tile_size}
  patch_size: 256 # if level is "region", size used to unroll the region into patches

speed:
  num_workers_preprocessing: 8 # number of workers for preprocessing
  num_workers_data_loading: 8 # number of workers for data loading

wandb:
  enable: false
  project: "" # wandb project name
  username: "" # wandb username
  exp_name: "" # wandb experiment name
  tags: ["features", "${model.level}", "${tiling.tile_size}"] # wandb tags
  dir: "/home/user/"
  group:
  resume_id: # if resuming & wandb enabled, specify the id of the wandb run to resume